{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","bodyParser","json","client","db","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","err","status","message","post","newIssue","body","created","Date","Issue","validateIssue","insertOne","result","_id","insertedId","limit","next","MongoClient","connect","useNewUrlParser","useUnifiedTopology","connection","listen"],"mappings":"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","sourcesContent":["import 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\n\nimport SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\n\nconst app = express();\n\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\n// MongoClient instance\nlet client;\nlet db;\n\nif (process.env.NODE_ENV !== 'production') {\n    const webpack = require('webpack');\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const webpackHotMiddleware = require('webpack-hot-middleware');\n\n    const config = require('../webpack.config');\n    config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n    config.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n    const bundler = webpack(config);\n    app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n    app.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n\napp.get('/api/issues', (req, res) => {\n    db.collection('issues').find().toArray().then(issues => {\n        const metadata = {\n            total_count: issues.length\n        };\n    \n        res.json({\n            _metadata: metadata,\n            records: issues\n        })\n    }).catch(err => {\n        console.log(err);\n        res.status(500).json({\n            message: `Internal Server Error: ${err}`\n        })\n    })\n})\n\napp.post('/api/issues', (req, res) => {\n    const newIssue = req.body;\n    newIssue.created = new Date();\n    if (!newIssue.status) newIssue.status = 'New';\n\n    const err = Issue.validateIssue(newIssue);\n    if (err) {\n        res.status(422).json({\n            message: `Invalid request: ${err}`\n        })\n        return;\n    }\n    \n    db.collection('issues').insertOne(newIssue).then(result => {\n        return db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n    }).then(newIssue => {\n        res.json(newIssue)\n    }).catch(err => {\n        console.log(err);\n        res.status(500).json({\n            message: `Internal Server Error: ${err}`\n        })\n    })\n})\n\nMongoClient.connect('mongodb://localhost', { useNewUrlParser: true, useUnifiedTopology: true }, (err, connection) => {\n    if (err) throw err;\n    client = connection;\n    db = client.db('issuetracker');\n\n    // db.collection('issues').find().toArray((err, docs) => {\n    //     console.log(`Result of find: `, docs);\n    //     client.close();\n    // })\n\n    app.listen(3000, function() {\n        console.log('App started on port 3000');\n    });\n})"],"file":"server.js"}